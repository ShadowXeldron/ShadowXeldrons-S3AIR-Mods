// Once again, I have rewritten another worthless object. If you've been keeping count, we're now at our third rewrite (and a half; I had an earlier WIP of this before I axed extra slot support). And this time, it's unrelated to compatibility!
// This time, the focus is on maintainability. Elseif chains are annoying to make, annoying to debug, and overall annoying to have to deal with.
// Also, we've now got functions so you can add you're own damn extra slot support

// Now with added commentary!

/*
	This script file is the primary compnent of the Per-Character Themes mod for Sonic 3 A.I.R. 
	Copyright (C) 2017-2022 by Eukaryot


	Some code is taken from the Sonic 3 A.I.R script software distribution, Copyright (C) 2017-2022 by Eukaryot

	This mod is published under the GNU GPLv3 open source software license, see LICENSE.txt
	or https://www.gnu.org/licenses/gpl-3.0.en.html
	
*/

include constant-arrays // The audio keys are in here
include functions // Contains functions for getting soundkeys

// Preprocessor directive for people to use
#define PCT_ACTIVE

// Config options
global u8 option.knux.clear
global u8 option.knux.specialclear
global u8 option.knux.1up
global u8 option.knux.super
global u8 option.knux.hyper
global u8 option.knux.gameover
global u8 option.knux.invincible
global u8 option.knux.credits
global u8 option.knux.speed

global u8 option.sonic.clear
global u8 option.sonic.specialclear
global u8 option.sonic.1up
global u8 option.sonic.super
global u8 option.sonic.hyper
global u8 option.sonic.gameover
global u8 option.sonic.invincible
global u8 option.sonic.credits
global u8 option.sonic.speed

global u8 option.tails.clear
global u8 option.tails.specialclear
global u8 option.tails.1up
global u8 option.tails.super
global u8 option.tails.hyper
global u8 option.tails.gameover
global u8 option.tails.invincible
global u8 option.tails.credits
global u8 option.tails.speed

// Now the actual code
function u64 Standalone.getModdedSoundKey(u64 soundKey, u8 sfxId, u8 soundRegType)
{
	u64 originalSoundkey = soundKey

	// Time for a refreshing new begining! 

	u8 char_ID = getMainCharacter() // HEY HEY HEY, BUT MUH EXTRA SLO- Don't mention it or I'll snap your toenails

	if sfxId == MUSIC_INVINCIBLE
		soundKey = PCT.getInvincibilitySoundKey(char_ID)

	else if sfxId == MUSIC_EXTRALIFE
		soundKey = PCT.getExtraLifeSoundKey(char_ID)

	else if sfxId == MUSIC_GAMEOVER
		soundKey = PCT.getGameOverSoundKey(char_ID)

	else if sfxId == MUSIC_LEVELCLEAR
		soundKey = PCT.getActClearSoundKey(char_ID, global.game_mode == 0x48) // Did you know that you can perform comparison opertations in functions for booleans?

	else if sfxId == MUSIC_SUPER
		soundKey = PCT.getSuperSoundKey(char_ID, super.active == 0xff || super.active.tails == 0xff)

	else if sfxId == MUSIC_CREDITSMEDLEY
		soundKey = PCT.getCreditsSoundKey(char_ID)

	else
		soundKey = "VANILLA HANDLING" // Quick and dirty fix for a compatibility issue with Audio Overhaul, assuming that you still have it...


	// Soundkey has been set.
	if soundKey == "VANILLA HANDLING" // Used when disabling the mod's crazy stuff 
		return base.Standalone.getModdedSoundKey(originalSoundkey, sfxId, soundRegType)

	else if originalSoundkey == MUSIC_EXTRALIFE 
	{
		// These need to be played in the sound effect channel to avoid causing the music to stop. Therefore, we're using the same solution as Eukayrot did for Standalone.playAudio
		Audio.playOverride(soundKey, AudioContext.CONTEXT_MUSIC, 1, 0)
		return false // Non-void functions have to return a value
	}

	else // Otherwise, return the custom theme and play it
		return soundKey
}

// Now for speedshoes. Wahoo.

#if STANDALONE
function u64 PCT.getSpeedSong()
{
	u64 soundKey // This initialises the variable that will be fed into the sound player
	u8 char_ID = getMainCharacter() // Usage here is the same as in PlayMusic - it's to check who you are playing as.

	if (char_ID == 2) // Knuckles
	{
		soundKey = KNUX_SPEED[option.knux.speed]
	}

	else if (char_ID == 1) // Tails
	{
		soundKey = TAILS_SPEED[option.tails.speed]
	}

	else if (char_ID == 0) // Sonic
	{
		soundKey = SONIC_SPEED[option.sonic.speed]
	}

	return soundKey
}

// I hate this code so much
function void Character.updateBonusEffects() 
{
	bool use_speed_music = (char.bonus_effect & char.bonus.SPEED_UP && !super.active && !super.active.tails)

	// Do base first
	base.Character.updateBonusEffects()

	if (use_speed_music)
	{
		// If the speed shoes are actually active
		if ((char.bonus_effect & char.bonus.SPEED_UP) == 0)
			chooseFittingMusic()

		else
		{
			u64 speedkey = PCT.getSpeedSong()

			if (!Audio.isPlayingAudio(speedkey))
			{
				Audio.playAudio(speedkey,0)
			}
		}
	}
}

#endif

