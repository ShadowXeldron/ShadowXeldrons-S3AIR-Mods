// Once again, I have rewritten another worthless object. If you've been keeping count, we're now at our third rewrite (and a half; I had an earlier WIP of this before I axed extra slot support). And this time, it's unrelated to compatibility!
// This time, the focus is on maintainability. Elseif chains are annoying to make, annoying to debug, and overall annoying to have to deal with.
// Also, we've now got functions so you can add you're own damn extra slot support

// Now with added commentary!

/*
	This script file is the primary compnent of the Per-Character Themes mod for Sonic 3 A.I.R. 
	Copyright (C) 2017-2022 by Eukaryot


	Some code is taken from the Sonic 3 A.I.R script software distribution, Copyright (C) 2017-2022 by Eukaryot

	This mod is published under the GNU GPLv3 open source software license, see LICENSE.txt
	or https://www.gnu.org/licenses/gpl-3.0.en.html
	
*/

include constant-arrays // The audio keys are in here

// Preprocessor directive for people to use
#define PCT_ACTIVE

/*

Just so that I remember them, here's the constants that I need to know

MUSIC_SUPER	
MUSIC_EXTRALIFE	
MUSIC_LEVELCLEAR	
MUSIC_CREDITSMEDLEY
MUSIC_INVINCIBLE
MUSIC_GAMEOVER

*/


// Config options
global u8 option.knux.clear
global u8 option.knux.specialclear
global u8 option.knux.1up
global u8 option.knux.super
global u8 option.knux.hyper
global u8 option.knux.gameover
global u8 option.knux.invincible
global u8 option.knux.credits
global u8 option.knux.speed

global u8 option.sonic.clear
global u8 option.sonic.specialclear
global u8 option.sonic.1up
global u8 option.sonic.super
global u8 option.sonic.hyper
global u8 option.sonic.gameover
global u8 option.sonic.invincible
global u8 option.sonic.credits
global u8 option.sonic.speed

global u8 option.tails.clear
global u8 option.tails.specialclear
global u8 option.tails.1up
global u8 option.tails.super
global u8 option.tails.hyper
global u8 option.tails.gameover
global u8 option.tails.invincible
global u8 option.tails.credits
global u8 option.tails.speed

function u64 Standalone.getModdedSoundKey(u64 soundKey, u8 sfxId, u8 soundRegType)
{
	u64 originalSoundkey = soundKey

	// Time for a refreshing new begining! 

	u8 charID = getMainCharacter() // HEY HEY HEY, BUT MUH EXTRA SLO- Don't mention it or I'll snap your toenails

	// I know you don't actually need the curly brackets, but I think it makes things tidier.

	if sfxId == MUSIC_INVINCIBLE
	{
		// Like it or not, elseif chains are always going to be a requirement. However, with constant arrays we can at least offset some of the issues.

		if (charID == 2) // Knuckles
		{
			soundKey = KNUX_INVINCIBLE[option.knux.invincible]
		}

		if (charID == 1) // Tails
		{
			soundKey = TAILS_INVINCIBLE[option.tails.invincible]
		}

		if (charID == 0) // Sonic
		{
			soundKey = SONIC_INVINCIBLE[option.sonic.invincible]
		}
	}

	else if sfxId == MUSIC_EXTRALIFE
	{
		// Like it or not, elseif chains are always going to be a requirement. However, with constant arrays we can at least offset some of the issues.

		if (charID == 2) // Knuckles
		{
			soundKey = KNUX_EXTRALIFE[option.knux.1up]
		}

		if (charID == 1) // Tails
		{
			soundKey = TAILS_EXTRALIFE[option.tails.1up]
		}

		if (charID == 0) // Sonic
		{
			soundKey = SONIC_EXTRALIFE[option.sonic.1up]
		}
	}

	else if sfxId == MUSIC_GAMEOVER
	{

		if (charID == 2) // Knuckles
		{
			soundKey = KNUX_GAMEOVER[option.knux.gameover]
		}

		if (charID == 1) // Tails
		{
			soundKey = TAILS_GAMEOVER[option.tails.gameover]
		}

		if (charID == 0) // Sonic
		{
			soundKey = SONIC_GAMEOVER[option.sonic.gameover]
		}
	}

	else if sfxId == MUSIC_LEVELCLEAR
	{

		if (global.game_mode == 0x48) // Special Stage
		{
			if (charID == 2) // Knuckles
			{
				soundKey = KNUX_SPECIALCLEAR[option.knux.specialclear]
			}

			if (charID == 1) // Tails
			{
				soundKey = KNUX_SPECIALCLEAR[option.tails.specialclear]
			}

			if (charID == 0) // Sonic
			{
				soundKey = KNUX_SPECIALCLEAR[option.sonic.specialclear]
			}
		}

		else // Normal Act Clear
		{
			if (charID == 2) // Knuckles
			{
				soundKey = KNUX_ACTCLEAR[option.knux.clear]
			}

			if (charID == 1) // Tails
			{
				soundKey = TAILS_ACTCLEAR[option.tails.clear]
			}

			if (charID == 0) // Sonic
			{
				soundKey = SONIC_ACTCLEAR[option.sonic.clear]
			}
		}
	}

	else if sfxId == MUSIC_SUPER
	{
		if (super.active == 0xff || super.active.tails == 0xff) // Hyper Forms. Tails uses his own variable for some reason.
		{
			if (charID == 2) // Knuckles
			{
				soundKey = KNUX_SUPER[option.knux.hyper] // We only have one super table since all the tracks are the same
			}

			if (charID == 1) // Tails
			{
				soundKey = TAILS_SUPER[option.tails.hyper]
			}

			if (charID == 0) // Sonic
			{
				soundKey = SONIC_SUPER[option.sonic.hyper]
			}
		}

		else // Normal super forms
		{
			if (charID == 2) // Knuckles
			{
				soundKey = KNUX_SUPER[option.knux.super]
			}

			if (charID == 1) // Tails
			{
				soundKey = TAILS_SUPER[option.tails.super]
			}

			if (charID == 0) // Sonic
			{
				soundKey = SONIC_SUPER[option.sonic.super]
			}
		}
	}

	else if sfxId == MUSIC_CREDITSMEDLEY
	{
		if (charID == 2) // Knuckles
		{
			soundKey = KNUX_CREDITS[option.knux.credits]
		}

		if (charID == 1) // Tails
		{
			soundKey = TAILS_CREDITS[option.tails.credits]
		}

		if (charID == 0) // Sonic
		{
			soundKey = SONIC_CREDITS[option.sonic.credits]
		}
	}

	else
	{
		soundKey = "VANILLA HANDLING" // Quick and dirty fix for a compatibility issue with Audio Overhaul, assuming that you still have it...
	}


	// Soundkey has been set. 

	if soundKey == "VANILLA HANDLING" // Used when disabling the mod's crazy stuff 
	{
		return base.Standalone.getModdedSoundKey(originalSoundkey, sfxId, soundRegType)
	}

	else if originalSoundkey == MUSIC_EXTRALIFE 
	{
		// These need to be played in the sound effect channel to avoid causing the music to stop. Therefore, we're using the same solution as Eukayrot did for Standalone.playAudio
		Audio.playOverride(soundKey, AudioContext.CONTEXT_MUSIC, 1, 0)
		return false // Non-void functions have to return a value
	}

	else
	{
		return soundKey
	}
	
}

// Now for speedshoes. Wahoo.

#if STANDALONE
function u64 PCT.getSpeedSong()
{
	u64 soundKey // This initialises the variable that will be fed into the sound player
	u8 charID = getMainCharacter() // Usage here is the same as in PlayMusic - it's to check who you are playing as.

	if (charID == 2) // Knuckles
	{
		soundKey = KNUX_SPEED[option.knux.speed]
	}

	else if (charID == 1) // Tails
	{
		soundKey = TAILS_SPEED[option.tails.speed]
	}

	else if (charID == 0) // Sonic
	{
		soundKey = SONIC_SPEED[option.sonic.speed]
	}

	return soundKey
}

// I hate this code so much
function void Character.updateBonusEffects() 
{
	bool use_speed_music = (char.bonus_effect & char.bonus.SPEED_UP && !super.active && !super.active.tails)

	// Do base first
	base.Character.updateBonusEffects()

	if (use_speed_music)
	{
		// If the speed shoes are actually active
		if ((char.bonus_effect & char.bonus.SPEED_UP) == 0)
			chooseFittingMusic()

		else
		{
			u64 speedkey = PCT.getSpeedSong()

			if (!Audio.isPlayingAudio(speedkey))
			{
				Audio.playAudio(speedkey,0)
			}
		}
	}
}

#endif

