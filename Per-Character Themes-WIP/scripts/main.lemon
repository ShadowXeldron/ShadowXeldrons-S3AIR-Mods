// Once again, I have rewritten another worthless object. If you've been keeping count, we're now at our third rewrite. And this time, it's unrelated to compatibility!
// This time, the focus is on maintainability. Elseif chains are annoying to make, annoying to debug, and overall annoying to have to deal with

// Now with added commentary!

/*
	This script file is the primary compnent of the Per-Character Themes mod for Sonic 3 A.I.R. 
	Copyright (C) 2017-2022 by Eukaryot


	Some code is taken from the Sonic 3 A.I.R script software distribution, Copyright (C) 2017-2022 by Eukaryot

	This mod is published under the GNU GPLv3 open source software license, see LICENSE.txt
	or https://www.gnu.org/licenses/gpl-3.0.en.html
	
*/

include constant-arrays // The audio keys are in here

// Preprocessor directive for people to use
#define PCT_ACTIVE

// Additional preprocessor directive used by the mod - this automatically sets the mod to "lite" mode, which omits extra character support. This is to keep the filesize small.
#define PCT_LITE = 0

/*

Just so that I remember them, here's the constants that I need to know

MUSIC_SUPER	
MUSIC_EXTRALIFE	
MUSIC_LEVELCLEAR	
MUSIC_CREDITSMEDLEY
MUSIC_INVINCIBLE
MUSIC_GAMEOVER

*/

// Config options
global u8 option.knux.clear
global u8 option.knux.specialclear
global u8 option.knux.1up
global u8 option.knux.super
global u8 option.knux.hyper
global u8 option.knux.gameover
global u8 option.knux.invincible
global u8 option.knux.credits
global u8 option.knux.speed

global u8 option.sonic.clear
global u8 option.sonic.specialclear
global u8 option.sonic.1up
global u8 option.sonic.super
global u8 option.sonic.hyper
global u8 option.sonic.gameover
global u8 option.sonic.invincible
global u8 option.sonic.credits
global u8 option.sonic.speed

global u8 option.tails.clear
global u8 option.tails.specialclear
global u8 option.tails.1up
global u8 option.tails.super
global u8 option.tails.hyper
global u8 option.tails.gameover
global u8 option.tails.invincible
global u8 option.tails.credits
global u8 option.tails.speed

global u8 option.mighty.clear
global u8 option.mighty.specialclear
global u8 option.mighty.1up
global u8 option.mighty.super
global u8 option.mighty.hyper
global u8 option.mighty.gameover
global u8 option.mighty.invincible
global u8 option.mighty.credits
global u8 option.mighty.speed

global u8 speedShoesUsed // We don't need this anymore

function u8 getCharID() // Function that checks for character IDs
{
	u8 charID = getMainCharacter() // It made me do this in development, even though it let me off before

	/* For anyone reading this, I have a cheat sheet prepared for you all to know who's who under the wave of charIDs. 
	I thought that charID would be less of a pain to work this than nested Mods.modIsActives
		
	charID == 0 - Sonic
	charID == 1 - Tails
	charID == 2 - Knuckles
	charID == 3 - Mighty

	These IDs are reserved for future installments to the Extra Slot Project

	charID == 4 - Ray
	charID == 5 - Amy
	charID == 6 - Metal Sonic Kai (I'll also include Ultimate Metal in the mix as well)
	(Espio, you will be sorely missed)
			
	
	The thing is, I don't actually use extra slots and I only added support so that the 1 year olds don't complain about hearing Sonic 2 music when playing as Extra Slot Harry Styles.

	*/

	// Mod detection; for now we've only got Mighty. I hope that you lot hurry up with Ray so that I can add it.
	// This checks if you're playing as Sonic with Ultimate Mighty loaded, or straight-up playing as Extra Slot Might.
	//Thanks to iCloudius for help on detecting if somebody is playing as Extra Slot Mighty.

	// This only runs if PCT_LITE is false. Every character supported increases the filesize, and the web version is played on notoriously crap devices that can't handle many mods.
	#if PCT_LITE == 0


	if ((Mods.isModActive("Ultimate Mighty") && isMainCharacter(CHARACTER_SONIC)) || (u8[0xffffE654] == 1 && Renderer.hasCustomSprite("MightyPose_0x00")))  // No I am not changing this to global.xtrachar. GPL is serious buisness,
	{
		charID = 3
	}

	#endif

	return charID
}



function u64 Standalone.getModdedSoundKey(u64 soundKey, u8 sfxId, u8 soundRegType)
{
	u64 originalSoundkey = soundKey

	// Time for a refreshing new begining! 

	u8 charID = getCharID() // the CharID system is used to easily add support for extra characters.

	// I know you don't actually need the curly brackets, but I think it makes things tidier.

	if sfxId == MUSIC_INVINCIBLE
	{
		// Like it or not, elseif chains are always going to be a requirement. However, with constant arrays we can at least offset some of the issues.

		if (charID == 2) // Knuckles
		{
			soundKey = KNUX_INVINCIBLE[option.knux.invincible]
		}

		if (charID == 1) // Tails
		{
			soundKey = TAILS_INVINCIBLE[option.tails.invincible]
		}

		if (charID == 0) // Sonic
		{
			soundKey = SONIC_INVINCIBLE[option.sonic.invincible]
		}
	}

	if sfxId == MUSIC_EXTRALIFE
	{
		// Like it or not, elseif chains are always going to be a requirement. However, with constant arrays we can at least offset some of the issues.

		if (charID == 2) // Knuckles
		{
			soundKey = KNUX_EXTRALIFE[option.knux.1up]
		}

		if (charID == 1) // Tails
		{
			soundKey = TAILS_EXTRALIFE[option.tails.1up]
		}

		if (charID == 0) // Sonic
		{
			soundKey = SONIC_EXTRALIFE[option.sonic.1up]
		}
	}

	if sfxId == MUSIC_GAMEOVER
	{

		if (charID == 2) // Knuckles
		{
			soundKey = KNUX_GAMEOVER[option.knux.gameover]
		}

		if (charID == 1) // Tails
		{
			soundKey = TAILS_GAMEOVER[option.tails.gameover]
		}

		if (charID == 0) // Sonic
		{
			soundKey = SONIC_GAMEOVER[option.sonic.gameover]
		}
	}

	if sfxId == MUSIC_LEVELCLEAR
	{

		if (objA0.countdown_value == 269) // Special Stage
		{
			if (charID == 2) // Knuckles
			{
				soundKey = KNUX_SPECIALCLEAR[option.knux.specialclear]
			}

			if (charID == 1) // Tails
			{
				soundKey = KNUX_SPECIALCLEAR[option.tails.specialclear]
			}

			if (charID == 0) // Sonic
			{
				soundKey = KNUX_SPECIALCLEAR[option.sonic.specialclear]
			}
		}

		else // Normal Act Clear
		{
			if (charID == 2) // Knuckles
			{
				soundKey = KNUX_ACTCLEAR[option.knux.clear]
			}

			if (charID == 1) // Tails
			{
				soundKey = TAILS_ACTCLEAR[option.tails.clear]
			}

			if (charID == 0) // Sonic
			{
				soundKey = SONIC_ACTCLEAR[option.sonic.clear]
			}
		}
	}

	if sfxId == MUSIC_SUPER
	{
		if (super.active == 0xff || super.active.tails == 0xff) // Hyper Forms. Tails uses his own variable for some reason.
		{
			if (charID == 2) // Knuckles
			{
				soundKey = KNUX_SUPER[option.knux.hyper] // We only have one super table since all the tracks are the same
			}

			if (charID == 1) // Tails
			{
				soundKey = TAILS_SUPER[option.tails.hyper]
			}

			if (charID == 0) // Sonic
			{
				soundKey = SONIC_SUPER[option.sonic.hyper]
			}
		}

		else // Normal super forms
		{
			if (charID == 2) // Knuckles
			{
				soundKey = KNUX_SUPER[option.knux.super]
			}

			if (charID == 1) // Tails
			{
				soundKey = TAILS_SUPER[option.tails.super]
			}

			if (charID == 0) // Sonic
			{
				soundKey = SONIC_SUPER[option.sonic.super]
			}
		}
	}

	if sfxId == MUSIC_CREDITSMEDLEY
	{
		if (charID == 2) // Knuckles
		{
			soundKey = KNUX_CREDITS[option.knux.credits]
		}

		if (charID == 1) // Tails
		{
			soundKey = TAILS_CREDITS[option.tails.credits]
		}

		if (charID == 0) // Sonic
		{
			soundKey = SONIC_CREDITS[option.sonic.credits]
		}
	}


	// Soundkey has been set. 

	if soundKey == "VANILLA HANDLING" // Used when disabling the mod's crazy stuff 
	{
		return originalSoundkey
	}

	else if originalSoundkey == MUSIC_EXTRALIFE 
	{
		// These need to be played in the sound effect channel to avoid causing the music to stop. Therefore, we're using the same solution as Eukayrot did for Standalone.playAudio
		Audio.playOverride(soundKey, AudioContext.CONTEXT_MUSIC, 1, 0)
		return false // Non-void functions have to return a value
	}

	else
	{
		return soundKey
	}
	
}

// Don't get too excited boys(?), those were the EASY ones! Now it's the dreaded speed shoes.

/* To any and all who notice this, yes, I DID take a cursory look at Speed Shoes Music 2 by Lavaslime so that I could get the foggiest idea on how to make this stupid thing work. 
	   No, I did not copy any of it. If I could, I would have tried to implement it completely differently. 
	   As I once did, since the music. And failed miserably. See function void getSpeedSong above.
	   Astute nosers who are as nosy as me may have also nosed that Speed Shoes Music 2 modifies changeMusicTempo. I may be nosy, but I'm not a plagiarist. 
	   Therefore, we're not using that particular function. This may make the mod worse overall, but so be it */

// This was by far my LEAST favourite part of the mod to have to implement. I shall consider these my bad omen.

// Also, this whole time I was CONVINCED that address hooks were just comments.

// This function was used for checking speed shoes music. Knuckles, Mighty and Tails cooperated just fine, but that wretched blue rat simply wouldn't work.

#if STANDALONE
function void playSpeedSong()
{
	u64 soundKey // This initialises the variable that will be fed into the sound player
	u8 charID = (getCharID()) // Usage here is the same as in PlayMusic - it's to check who you are playing as.

	if (charID == 2) // Knuckles
	{
		soundKey = KNUX_SPEED[option.knux.speed]
	}

	if (charID == 1) // Tails
	{
		soundKey = TAILS_SPEED[option.tails.speed]
	}

	if (charID == 0) // Sonic
	{
		soundKey = SONIC_SPEED[option.sonic.speed]
	}

	// Soundkey Fallback Go!

	if (soundKey == "VANILLA HANDLING")
	{
		return
	}

	// Otherwise, fire the long boomy thingies

	else if (!Audio.isPlayingAudio(soundKey))
	{
		Audio.playAudio(soundKey,0)
	}

	else
	{
		return
	}
}

// Another fix from TimerBunneh; wish I had you around when I first implemented this feature

function void Character.updateBonusEffects() 
{
	
	//u8 speedSongPlaying = 0 // Used to check if the speed song is playing
	bool speedupped = (char.bonus_effect & char.bonus.SPEED_UP)

	if (super.active || super.active.tails)
	{
		speedupped == false // I don't want the speed shoes music playing while super
	}
	
	base.Character.updateBonusEffects()
	
	if (speedupped) 
	{
		playSpeedSong()
	}
	if ((speedupped) && (((char.bonus_effect & char.bonus.SPEED_UP)) == 0))
	{	
		chooseFittingMusic()
	}
}

#endif