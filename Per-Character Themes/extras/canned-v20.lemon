// This is a version of the script that didn't use overwritable functions and included extra character support.
// After some consideration, I decided to scrap this version despite having it for more than a year because of my distaste towards the community. Since the extra slots are made by toxic people such as Dynamic Lemons, I ultimately decided I didn't want to support them. Also, the upcoming rewrite would mean that the entire thing would be outdated by the time it was ready.

// Still, I've decided to include this version for the sake of preservation. Well, not on GB anyway. I can't put it in there because I can't include the extras folder because Timer hates fun.

// This script is actually fully functional and the only thing holding it back was the fact that I never actually looped the audio. Also, I added

// This is from constantarrays.lemon

// Extra Characters
// I still don't get why people like extra slots.

// Mighty the forgotten Chaotix member

constant array<string> MIGHTY_INVINCIBLE =
{
    "VANILLA HANDLING",
    "mighty-invincible",
    "2C",
    "2C_sonic3"
}

constant array<string> MIGHTY_GAMEOVER =
{
    "VANILLA HANDLING",
    "mighty-gameover"
}

constant array<string> MIGHTY_ACTCLEAR =
{
    "VANILLA HANDLING",
    "mighty-clear"
}

constant array<string> MIGHTY_SPECIALCLEAR =
{
    "VANILLA HANDLING",
    "mighty-clear",
    "cdus-clear"
}

constant array<string> MIGHTY_EXTRALIFE =
{
    "VANILLA HANDLING",
    "mighty-1up",
    "2a",
    "2a_sonic3"
}

constant array<string> MIGHTY_SUPER =
{
    "VANILLA HANDLING",
    "mighty-super",
    "mighty-hyper",
    "supertheme_sonic2",
    "2C",
    "2C_sonic3",
    "2E_proto"
}

constant array<string> MIGHTY_CREDITS =
{
    "VANILLA HANDLING",
    "mighty-credits",
    "DC",
    "26",
    "26_proto"
}

constant array<string> MIGHTY_SPEED =
{
    "VANILLA HANDLING",
    "mighty-speed",
    "speedshoes"
}

// Ray

constant array<string> RAY_INVINCIBLE =
{
    "VANILLA HANDLING",
    "ray-invincible",
    "2C",
    "2C_sonic3"
}

constant array<string> RAY_GAMEOVER =
{
    "VANILLA HANDLING",
    "ray-gameover"
}

constant array<string> RAY_ACTCLEAR =
{
    "VANILLA HANDLING",
    "ray-clear"
}

constant array<string> RAY_SPECIALCLEAR =
{
    "VANILLA HANDLING",
    "ray-clear",
    "cdus-clear"
}

constant array<string> RAY_EXTRALIFE =
{
    "VANILLA HANDLING",
    "ray-1up",
    "2a",
    "2a_sonic3"
}

constant array<string> RAY_SUPER =
{
    "VANILLA HANDLING",
    "ray-super",
    "ray-hyper",
    "supertheme_sonic2",
    "2C",
    "2C_sonic3",
    "2E_proto"
}

constant array<string> RAY_CREDITS =
{
    "VANILLA HANDLING",
    "ray-credits",
    "DC",
    "26",
    "26_proto"
}

constant array<string> RAY_SPEED =
{
    "VANILLA HANDLING",
    "ray-speed",
    "speedshoes"
}

// Ow the Edge

constant array<string> SHADOW_INVINCIBLE =
{
    "VANILLA HANDLING",
    "shadow-invincible",
    "2C",
    "2C_sonic3"
}

constant array<string> SHADOW_GAMEOVER =
{
    "VANILLA HANDLING",
    "shadow-gameover"
}

constant array<string> SHADOW_ACTCLEAR =
{
    "VANILLA HANDLING",
    "shadow-clear"
}

constant array<string> SHADOW_SPECIALCLEAR =
{
    "VANILLA HANDLING",
    "shadow-clear",
    "cdus-clear"
}

constant array<string> SHADOW_EXTRALIFE =
{
    "VANILLA HANDLING",
    "shadow-1up",
    "2a",
    "2a_sonic3"
}

constant array<string> SHADOW_SUPER =
{
    "VANILLA HANDLING",
    "shadow-super",
    "shadow-hyper",
    "supertheme_sonic2",
    "2C",
    "2C_sonic3",
    "2E_proto"
}

constant array<string> SHADOW_CREDITS =
{
    "VANILLA HANDLING",
    "shadow-credits",
    "DC",
    "26",
    "26_proto"
}

constant array<string> SHADOW_SPEED =
{
    "VANILLA HANDLING",
    "shadow-speed",
    "speedshoes"
}

// Sonic's annoying pink girlfriend

constant array<string> AMY_INVINCIBLE =
{
    "VANILLA HANDLING",
    "amy-invincible",
    "2C",
    "2C_sonic3"
}

constant array<string> AMY_GAMEOVER =
{
    "VANILLA HANDLING",
    "amy-gameover"
}

constant array<string> AMY_ACTCLEAR =
{
    "VANILLA HANDLING",
    "amy-clear"
}

constant array<string> AMY_SPECIALCLEAR =
{
    "VANILLA HANDLING",
    "amy-clear",
    "cdus-clear"
}

constant array<string> AMY_EXTRALIFE =
{
    "VANILLA HANDLING",
    "amy-1up",
    "2a",
    "2a_sonic3"
}

constant array<string> AMY_SUPER =
{
    "VANILLA HANDLING",
    "amy-super",
    "amy-hyper",
    "supertheme_sonic2",
    "2C",
    "2C_sonic3",
    "2E_proto"
}

constant array<string> AMY_CREDITS =
{
    "VANILLA HANDLING",
    "amy-credits",
    "DC",
    "26",
    "26_proto"
}

constant array<string> AMY_SPEED =
{
    "VANILLA HANDLING",
    "amy-speed",
    "speedshoes"
}

// That one pallate bug from Sonic 2 which everyone seems to like

constant array<string> ASHURA_INVINCIBLE =
{
    "VANILLA HANDLING",
    "ashura-invincible",
    "2C",
    "2C_sonic3"
}

constant array<string> ASHURA_GAMEOVER =
{
    "VANILLA HANDLING",
    "ashura-gameover"
}

constant array<string> ASHURA_ACTCLEAR =
{
    "VANILLA HANDLING",
    "ashura-clear"
}

constant array<string> ASHURA_SPECIALCLEAR =
{
    "VANILLA HANDLING",
    "ashura-clear",
    "cdus-clear"
}

constant array<string> ASHURA_EXTRALIFE =
{
    "VANILLA HANDLING",
    "ashura-1up",
    "2a",
    "2a_sonic3"
}

constant array<string> ASHURA_SUPER =
{
    "VANILLA HANDLING",
    "ashura-super",
    "ashura-hyper",
    "supertheme_sonic2",
    "2C",
    "2C_sonic3",
    "2E_proto"
}

constant array<string> ASHURA_CREDITS =
{
    "VANILLA HANDLING",
    "ashura-credits",
    "DC",
    "26",
    "26_proto"
}

constant array<string> ASHURA_SPEED =
{
    "VANILLA HANDLING",
    "ashura-speed",
    "speedshoes"
}


// The rest of the script is just main.lemon



// Once again, I have rewritten another worthless object. If you've been keeping count, we're now at our third rewrite. And this time, it's unrelated to compatibility!
// This time, the focus is on maintainability. Elseif chains are annoying to make, annoying to debug, and overall annoying to have to deal with
// Now with added commentary!

/*
	This script file is the primary compnent of the Per-Character Themes mod for Sonic 3 A.I.R. 
	Copyright (C) 2017-2022 by Eukaryot


	Some code is taken from the Sonic 3 A.I.R script software distribution, Copyright (C) 2017-2022 by Eukaryot

	This mod is published under the GNU GPLv3 open source software license, see LICENSE.txt
	or https://www.gnu.org/licenses/gpl-3.0.en.html
	
*/

include constant-arrays // The audio keys are in here

// Preprocessor directive for people to use
#define PCT_ACTIVE

// Additional preprocessor directive used by the mod - this automatically sets the mod to "lite" mode, which omits extra character support. This is to keep the filesize small.
#define PCT_LITE = 0

/*

Just so that I remember them, here's the constants that I need to know

MUSIC_SUPER	
MUSIC_EXTRALIFE	
MUSIC_LEVELCLEAR	
MUSIC_CREDITSMEDLEY
MUSIC_INVINCIBLE
MUSIC_GAMEOVER

*/


// Config options
global u8 option.knux.clear
global u8 option.knux.specialclear
global u8 option.knux.1up
global u8 option.knux.super
global u8 option.knux.hyper
global u8 option.knux.gameover
global u8 option.knux.invincible
global u8 option.knux.credits
global u8 option.knux.speed

global u8 option.sonic.clear
global u8 option.sonic.specialclear
global u8 option.sonic.1up
global u8 option.sonic.super
global u8 option.sonic.hyper
global u8 option.sonic.gameover
global u8 option.sonic.invincible
global u8 option.sonic.credits
global u8 option.sonic.speed

global u8 option.tails.clear
global u8 option.tails.specialclear
global u8 option.tails.1up
global u8 option.tails.super
global u8 option.tails.hyper
global u8 option.tails.gameover
global u8 option.tails.invincible
global u8 option.tails.credits
global u8 option.tails.speed

global u8 option.mighty.clear
global u8 option.mighty.specialclear
global u8 option.mighty.1up
global u8 option.mighty.super
global u8 option.mighty.hyper
global u8 option.mighty.gameover
global u8 option.mighty.invincible
global u8 option.mighty.credits
global u8 option.mighty.speed

global u8 option.ray.clear
global u8 option.ray.specialclear
global u8 option.ray.1up
global u8 option.ray.super
global u8 option.ray.hyper
global u8 option.ray.gameover
global u8 option.ray.invincible
global u8 option.ray.credits
global u8 option.ray.speed

global u8 option.shadow.clear
global u8 option.shadow.specialclear
global u8 option.shadow.1up
global u8 option.shadow.super
global u8 option.shadow.hyper
global u8 option.shadow.gameover
global u8 option.shadow.invincible
global u8 option.shadow.credits
global u8 option.shadow.speed

global u8 option.amy.clear
global u8 option.amy.specialclear
global u8 option.amy.1up
global u8 option.amy.super
global u8 option.amy.hyper
global u8 option.amy.gameover
global u8 option.amy.invincible
global u8 option.amy.credits
global u8 option.amy.speed

global u8 option.ashura.clear
global u8 option.ashura.specialclear
global u8 option.ashura.1up
global u8 option.ashura.super
global u8 option.ashura.hyper
global u8 option.ashura.gameover
global u8 option.ashura.invincible
global u8 option.ashura.credits
global u8 option.ashura.speed

global u8 speedShoesUsed // We don't need this anymore

function u8 getCharID() // Function that checks for character IDs
{
	u8 charID = getMainCharacter() // It made me do this in development, even though it let me off before

	/* For anyone reading this, I have a cheat sheet prepared for you all to know who's who under the wave of charIDs. 
	I thought that charID would be less of a pain to work this than nested Mods.modIsActives.
		
	charID == 0 - Sonic
	charID == 1 - Tails
	charID == 2 - Knuckles
	charID == 3 - Mighty
	charID == 4 - Ray
	charID == 5 - Shadow
	charID == 6 - Amy

	The thing is, I don't actually use extra slots and I only added support so that the 1 year olds don't complain about hearing Sonic 2 music when playing as Extra Slot Harry Styles.

	*/

	// Mod detection; for now we've only got Mighty. I hope that you lot hurry up with Ray so that I can add it.
	// This checks if you're playing as Sonic with Ultimate Mighty loaded, or straight-up playing as Extra Slot Might.
	//Thanks to iCloudius for help on detecting if somebody is playing as Extra Slot Mighty.

	// This only runs if PCT_LITE is false. Every character supported increases the filesize, and the web version is played on notoriously crap devices that can't handle many mods.
	#if PCT_LITE == 0


	if ((Mods.isModActive("Ultimate Mighty") && isMainCharacter(CHARACTER_SONIC)) && u8[0xffffe654] == 0 || (u8[0xffffE654] == 1 && Renderer.hasCustomSprite("MightyPose_0x00")))  // No I am not changing this to global.xtrachar. GPL is serious buisness,
	{
		charID = 3
	}

	if ((Mods.isModActive("Ray the Flying Squirrel") && isMainCharacter(CHARACTER_TAILS)) && u8[0xffffe654] == 0 || (Mods.isModActive("Extra Slot Ray") && u8[0xffffE654] == 2 ))
	{
		charID = 4
	}

	if ((Mods.isModActive("3D2D Shadow") && isMainCharacter(CHARACTER_SONIC)) && u8[0xffffe654] == 0 || (Mods.isModActive("Extra Slot 3D2D Shadow") && u8[0xffffE654] == 5 ))
	{
		charID = 5
	}

	if ((Mods.isModActive("Amy Rose") && isMainCharacter(CHARACTER_TAILS)) && u8[0xffffe654] == 0 || (Mods.isModActive("Extra Slot Amy") && u8[0xffffE654] == 3 ))
	{
		charID = 6
	}

	if ((Mods.isModActive("3D2D Glitches: Sonic 3 With Bluckles") && isMainCharacter(CHARACTER_SONIC)) && u8[0xffffe654] == 0 || (Mods.isModActive("Extra slot 3D in 2D Ashura") && u8[0xffffE654] == 168 ))
	{
		charID = 7
	}

	// This is in preparation for the eventual release of the Sage mod. Assuming I can think of anything to go with it.
	if (Mods.isModActive("starfall-sage-main") && isMainCharacter(CHARACTER_TAILS) && u8[0xffffe654] == 0 || (Mods.isModActive("starfall-sage-es") && u8[0xffffE654] == 0xff))
	{
		charID = 0 // Temporary value until the mod comes out
	}

	

	#endif

	return charID
}



function u64 Standalone.getModdedSoundKey(u64 soundKey, u8 sfxId, u8 soundRegType)
{
	u64 originalSoundkey = soundKey

	// Time for a refreshing new begining! 

	u8 charID = getCharID() // the CharID system is used to easily add support for extra characters.

	// I know you don't actually need the curly brackets, but I think it makes things tidier.

	if sfxId == MUSIC_INVINCIBLE
	{
		// Like it or not, elseif chains are always going to be a requirement. However, with constant arrays we can at least offset some of the issues.

		if (charID == 2) // Knuckles
		{
			soundKey = KNUX_INVINCIBLE[option.knux.invincible]
		}

		if (charID == 1) // Tails
		{
			soundKey = TAILS_INVINCIBLE[option.tails.invincible]
		}

		if (charID == 0) // Sonic
		{
			soundKey = SONIC_INVINCIBLE[option.sonic.invincible]
		}

		if (charID == 3) // Mighty
		{
			soundKey = MIGHTY_INVINCIBLE[option.mighty.invincible]
		}

		if (charID == 4) // Ray
		{
			soundKey = RAY_INVINCIBLE[option.ray.invincible]
		}

		if (charID == 5) // Shadow
		{
			soundKey = SHADOW_INVINCIBLE[option.shadow.invincible]
		}

		if (charID == 6) // Amy
		{
			soundKey = AMY_INVINCIBLE[option.amy.invincible]
		}

		if (charID == 7) // Ashura
		{
			soundKey = ASHURA_INVINCIBLE[option.ashura.invincible]
		}
	}

	else if sfxId == MUSIC_EXTRALIFE
	{
		// Like it or not, elseif chains are always going to be a requirement. However, with constant arrays we can at least offset some of the issues.

		if (charID == 2) // Knuckles
		{
			soundKey = KNUX_EXTRALIFE[option.knux.1up]
		}

		if (charID == 1) // Tails
		{
			soundKey = TAILS_EXTRALIFE[option.tails.1up]
		}

		if (charID == 0) // Sonic
		{
			soundKey = SONIC_EXTRALIFE[option.sonic.1up]
		}

		if (charID == 3) // Mighty
		{
			soundKey = MIGHTY_EXTRALIFE[option.mighty.1up]
		}

		if (charID == 4) // Ray
		{
			soundKey = RAY_EXTRALIFE[option.ray.1up]
		}

		if (charID == 5) // Shadow
		{
			soundKey = SHADOW_EXTRALIFE[option.shadow.1up]
		}

		if (charID == 6) // Amy
		{
			soundKey = AMY_EXTRALIFE[option.amy.1up]
		}

		if (charID == 7) // Ashura
		{
			soundKey = ASHURA_EXTRALIFE[option.ashura.1up]
		}
	}

	else if sfxId == MUSIC_GAMEOVER
	{

		if (charID == 2) // Knuckles
		{
			soundKey = KNUX_GAMEOVER[option.knux.gameover]
		}

		if (charID == 1) // Tails
		{
			soundKey = TAILS_GAMEOVER[option.tails.gameover]
		}

		if (charID == 0) // Sonic
		{
			soundKey = SONIC_GAMEOVER[option.sonic.gameover]
		}

		if (charID == 3) // Mighty
		{
			soundKey = MIGHTY_GAMEOVER[option.mighty.gameover]
		}

		if (charID == 4) // Ray
		{
			soundKey = RAY_GAMEOVER[option.ray.gameover]
		}

		if (charID == 5) // Shadow
		{
			soundKey = SHADOW_GAMEOVER[option.shadow.gameover]
		}

		if (charID == 6) // Amy
		{
			soundKey = AMY_GAMEOVER[option.amy.gameover]
		}

		if (charID == 7) // Ashura
		{
			soundKey = ASHURA_GAMEOVER[option.ashura.gameover]
		}
	}

	else if sfxId == MUSIC_LEVELCLEAR
	{

		if (global.game_mode == 0x48) // Special Stage
		{
			if (charID == 2) // Knuckles
			{
				soundKey = KNUX_SPECIALCLEAR[option.knux.specialclear]
			}

			if (charID == 1) // Tails
			{
				soundKey = KNUX_SPECIALCLEAR[option.tails.specialclear]
			}

			if (charID == 0) // Sonic
			{
				soundKey = KNUX_SPECIALCLEAR[option.sonic.specialclear]
			}

			if (charID == 3) // Mighty
			{
				soundKey = MIGHTY_SPECIALCLEAR[option.mighty.specialclear]
			}

			if (charID == 4) // Ray
			{
				soundKey = RAY_SPECIALCLEAR[option.ray.specialclear]
			}

			if (charID == 5) // Shadow
			{
				soundKey = SHADOW_SPECIALCLEAR[option.shadow.specialclear]
			}

			if (charID == 6) // Amy
			{
				soundKey = AMY_SPECIALCLEAR[option.amy.specialclear]
			}

			if (charID == 7) // Ashura
			{
				soundKey = ASHURA_SPECIALCLEAR[option.ashura.specialclear]
			}
		}

		else // Normal Act Clear
		{
			if (charID == 2) // Knuckles
			{
				soundKey = KNUX_ACTCLEAR[option.knux.clear]
			}

			if (charID == 1) // Tails
			{
				soundKey = TAILS_ACTCLEAR[option.tails.clear]
			}

			if (charID == 0) // Sonic
			{
				soundKey = SONIC_ACTCLEAR[option.sonic.clear]
			}

			if (charID == 3) // Mighty
			{
				soundKey = MIGHTY_ACTCLEAR[option.mighty.clear]
			}

			if (charID == 4) // Ray
			{
				soundKey = RAY_ACTCLEAR[option.ray.clear]
			}

			if (charID == 5) // Shadow
			{
				soundKey = SHADOW_ACTCLEAR[option.shadow.clear]
			}

			if (charID == 6) // Amy
			{
				soundKey = AMY_ACTCLEAR[option.amy.clear]
			}

			if (charID == 7) // Ashura
			{
				soundKey = ASHURA_ACTCLEAR[option.ashura.clear]
			}
		}
	}

	else if sfxId == MUSIC_SUPER
	{
		if (super.active == 0xff || super.active.tails == 0xff) // Hyper Forms. Tails uses his own variable for some reason.
		{
			if (charID == 2) // Knuckles
			{
				soundKey = KNUX_SUPER[option.knux.hyper] // We only have one super table since all the tracks are the same
			}

			if (charID == 1) // Tails
			{
				soundKey = TAILS_SUPER[option.tails.hyper]
			}

			if (charID == 0) // Sonic
			{
				soundKey = SONIC_SUPER[option.sonic.hyper]
			}

			if (charID == 3) // Mighty
			{
				soundKey = MIGHTY_SUPER[option.mighty.hyper]
			}

			if (charID == 4) // Ray
			{
				soundKey = RAY_SUPER[option.ray.hyper]
			}

			if (charID == 5) // Shadow
			{
				soundKey = SHADOW_SUPER[option.shadow.hyper]
			}

			if (charID == 6) // Amy
			{
				soundKey = AMY_SUPER[option.amy.hyper]
			}
			if (charID == 7) // Ashura
			{
				soundKey = ASHURA_SUPER[option.ashura.hyper]
			}
		}

		else // Normal super forms
		{
			if (charID == 2) // Knuckles
			{
				soundKey = KNUX_SUPER[option.knux.super]
			}

			if (charID == 1) // Tails
			{
				soundKey = TAILS_SUPER[option.tails.super]
			}

			if (charID == 0) // Sonic
			{
				soundKey = SONIC_SUPER[option.sonic.super]
			}

			if (charID == 3) // Mighty
			{
				soundKey = MIGHTY_SUPER[option.mighty.super]
			}

			if (charID == 4) // Ray
			{
				soundKey = RAY_SUPER[option.ray.super]
			}

			if (charID == 5) // Shadow
			{
				soundKey = SHADOW_SUPER[option.shadow.super]
			}

			if (charID == 6) // Amy
			{
				soundKey = AMY_SUPER[option.amy.super]
			}

			if (charID == 7) // Ashura
			{
				soundKey = ASHURA_SUPER[option.ashura.super]
			}

			
		}
	}

	else if sfxId == MUSIC_CREDITSMEDLEY
	{
		if (charID == 2) // Knuckles
		{
			soundKey = KNUX_CREDITS[option.knux.credits]
		}

		if (charID == 1) // Tails
		{
			soundKey = TAILS_CREDITS[option.tails.credits]
		}

		if (charID == 0) // Sonic
		{
			soundKey = SONIC_CREDITS[option.sonic.credits]
		}

		if (charID == 3) // Mighty
		{
			soundKey = MIGHTY_CREDITS[option.mighty.credits]
		}

		if (charID == 4) // Ray
		{
			soundKey = RAY_CREDITS[option.ray.credits]
		}

		if (charID == 5) // Shadow
		{
			soundKey = SHADOW_CREDITS[option.shadow.credits]
		}

		if (charID == 6) // Amy
		{
			soundKey = AMY_CREDITS[option.amy.credits]
		}

		if (charID == 7) // Ashura
		{
			soundKey = ASHURA_CREDITS[option.ashura.credits]
		}
	}

	else
	{
		soundKey = "VANILLA HANDLING" // Quick and dirty fix for a compatibility issue with Audio Overhaul.
	}


	// Soundkey has been set. 

	if soundKey == "VANILLA HANDLING" // Used when disabling the mod's crazy stuff 
	{
		return base.Standalone.getModdedSoundKey(originalSoundkey, sfxId, soundRegType)
	}

	else if originalSoundkey == MUSIC_EXTRALIFE 
	{
		// These need to be played in the sound effect channel to avoid causing the music to stop. Therefore, we're using the same solution as Eukayrot did for Standalone.playAudio
		Audio.playOverride(soundKey, AudioContext.CONTEXT_MUSIC, 1, 0)
		return false // Non-void functions have to return a value
	}

	else
	{
		return soundKey
	}
	
}

// Don't get too excited boys(?), those were the EASY ones! Now it's the dreaded speed shoes.

/* To any and all who notice this, yes, I DID take a cursory look at Speed Shoes Music 2 by Lavaslime so that I could get the foggiest idea on how to make this stupid thing work. 
	   No, I did not copy any of it. If I could, I would have tried to implement it completely differently. 
	   As I once did, since the music. And failed miserably. See function void getSpeedSong above.
	   Astute nosers who are as nosy as me may have also nosed that Speed Shoes Music 2 modifies changeMusicTempo. I may be nosy, but I'm not a plagiarist. 
	   Therefore, we're not using that particular function. This may make the mod worse overall, but so be it */

// This was by far my LEAST favourite part of the mod to have to implement. I shall consider these my bad omen.

// Also, this whole time I was CONVINCED that address hooks were just comments.

// This function was used for checking speed shoes music. Knuckles, Mighty and Tails cooperated just fine, but that wretched blue rat simply wouldn't work.

global bool doBaseSpeedCall = 0

#if STANDALONE
function u64 getSpeedSong()
{
	u64 soundKey // This initialises the variable that will be fed into the sound player
	u8 charID = (getCharID()) // Usage here is the same as in PlayMusic - it's to check who you are playing as.

	if (charID == 2) // Knuckles
	{
		soundKey = KNUX_SPEED[option.knux.speed]
	}

	if (charID == 1) // Tails
	{
		soundKey = TAILS_SPEED[option.tails.speed]
	}

	if (charID == 0) // Sonic
	{
		soundKey = SONIC_SPEED[option.sonic.speed]
	}

	if (charID == 3) // Mighty
	{
		soundKey = MIGHTY_SPEED[option.mighty.speed]
	}

	if (charID == 4) // Ray
	{
		soundKey = RAY_SPEED[option.ray.speed]
	}

	if (charID == 5) // Shadow
	{
		soundKey = SHADOW_SPEED[option.shadow.speed]
	}

	if (charID == 6) // Amy
	{
		soundKey = AMY_SPEED[option.amy.speed]
	}
	
	if (charID == 7) // Ashura
	{
		soundKey = ASHURA_SPEED[option.ashura.speed]
	}

	return soundKey
}

function void Character.updateBonusEffects() 
{
	bool speedupped = (char.bonus_effect & char.bonus.SPEED_UP) 

	if (super.active || super.active.tails)
	{
		speedupped = false // I don't want the speed shoes music playing while super
	}
	
	base.Character.updateBonusEffects()
	
	if (speedupped) 
	{
		u64 speedkey = getSpeedSong()

		if (!Audio.isPlayingAudio(speedkey))
		{
			Audio.playAudio(speedkey,0)
		}
	}
	
	if ((speedupped) && (((char.bonus_effect & char.bonus.SPEED_UP)) == 0))
	{	
		chooseFittingMusic()
	}
}

#endif

// Beat Invaders was snubbed for GOTY

